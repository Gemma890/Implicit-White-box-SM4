"""Auxiliary functions for S_hat_layer."""
import re
from sage.all import *
from utils.utilities import concatenate_anf
from sage.rings.polynomial.pbori.pbori import BooleanPolynomialRing
from sage.rings.finite_rings.finite_field_constructor import GF

# test sbox
# S = [7, 6, 0, 4, 2, 5, 1, 3]

def get_sbox_implicit_quatratic_matrix(wordsize, sbox):
    """Return the quadratic matrix of the implicit function of the given sbox.
        Formulate the implicit quatratic equations of sbox.
        Method used here is from this paper: Block Ciphers and Systems of Quadratic Equations
    """
    # 1. get the constant matrix C of the given sbox
    inputs = [[(i >> j) & 1 for j in range(wordsize)] for i in range(2 ** wordsize)]
    outputs = [[(sbox[i] >> j) & 1 for j in range(wordsize)] for i in range(2 ** wordsize)]

    C_cols = []
    for i in range(2 ** wordsize):
        # constant terms and basic terms
        col = [1] + inputs[i] + outputs[i]

        # quatratic cross terms
        cross_terms = [
            inputs[i][m] * outputs[i][n]
            for m in range(wordsize)
            for n in range(wordsize)
        ]

        col += cross_terms
        C_cols.append(col)

    C = Matrix(GF(2), list(zip(*C_cols)))
    c_nrows = C.nrows()
    # C_ref = C.echelon_form()
    # U, T, swaps, rank = C.echelon_form(transformation=True)
    # test data
    # print("\nConstant Matrix C:")
    # print(C)
    # print(C.nrows())

    # 2. get augmented matrix (In|C)
    # simplify matrix C to a echelon one and synchronize these changes to identity matrix on the left.
    def reduced_echelonize_right(I, C):
        M = I.augment(C)
        m = M.nrows()
        n_I = I.ncols()
        n_C = C.ncols()
        total_cols = n_I + n_C
        pivot_cols = []  # Record the columns where the pivots are located (relative to the entire augmented matrix).
        current_row = 0

        # Phase 1: Perform downward elimination to form the row echelon form.
        for col in range(n_I, total_cols):  # Only process the columns of C (i.e., starting from n_I).
            # Find the pivot in the current column.
            pivot = -1
            for r in range(current_row, m):
                if M[r, col] != 0:
                    pivot = r
                    break
            if pivot == -1:
                continue  # This column has no pivot; skip it.

            # Record the columns where the pivots are located.
            pivot_cols.append(col)

            # Swap the rows to the current row position.
            if pivot != current_row:
                M.swap_rows(current_row, pivot)

            # Eliminate the elements below the current column.
            for r in range(current_row + 1, m):
                if M[r, col] != 0:
                    M.add_multiple_of_row(r, current_row, 1)  # addition of GF(2) is oplus
            current_row += 1
            if current_row >= m:
                break  # all rows have been processed

        # Phase 2: Perform upward back substitution to form the reduced form.
        for pivot_row in reversed(range(len(pivot_cols))):
            col = pivot_cols[pivot_row]
            # Eliminate the elements above the pivot column.
            for r in range(pivot_row - 1, -1, -1):
                if M[r, col] != 0:
                    M.add_multiple_of_row(r, pivot_row, 1)

        return M

    # identity_matrix of size (C_rows * C_rows)
    In = identity_matrix(GF(2), c_nrows)
    augmented = reduced_echelonize_right(In, C)

    # Get the result.
    # P = augmented.submatrix(0, 0, c_nrows, c_nrows)
    # C_reduced = augmented.submatrix(0, c_nrows, c_nrows, 2 ** wordsize)

    # I_prime = augmented_matrix.submatrix(0, 0, c_nrows, c_nrows)
    # C_upper = augmented_matrix.submatrix(0, c_nrows, c_nrows, 2 ** wordsize)

    # print("变换后的I矩阵（P）：")
    # print(P)
    # print("\nC的最简行阶梯形：")
    # print(C_reduced)

    r = C.rank()
    AS = augmented.submatrix(r, 0, c_nrows - r, c_nrows)

    return AS

def matrix_to_anf_corrected(P, ws, only_x_names = False, start_index = 0):
    """
        Fixed version ensuring cross terms are generated by GF(2) multiplication:
            - Column structure:
            - Column 0: Constant term
            - Columns 1~ws: x0~x(ws-1)
            - Columns (ws+1)~(2ws): y0~y(ws-1)
            - Columns (2ws+1)~(2ws+ws²): Coefficients for x_i*y_j (lexicographic order)
    """
    ncols = P.ncols()
    expected_ncols = 1 + ws + ws + ws ** 2
    if ncols != expected_ncols:
        raise ValueError(f"Invalid column count. Expected {expected_ncols}, got {ncols}")

    x_vars = [f"x{start_index + i}" for i in range(ws)]
    y_prefix = "x" if only_x_names else "y"
    y_start = start_index + ws if only_x_names else start_index
    y_vars = [f"{y_prefix}{y_start + i}" for i in range(ws)]

    BPR = BooleanPolynomialRing(names=x_vars + y_vars)
    x = BPR.gens()[:ws]
    y = BPR.gens()[ws:ws * 2]

    # Column Index Mapping
    # Boundary indices for column types
    COL_CONSTANT = 0
    COL_X_START = 1
    COL_X_END = COL_X_START + ws
    COL_Y_START = COL_X_END
    COL_Y_END = COL_Y_START + ws
    COL_CROSS_START = COL_Y_END

    # Equation Generation
    equations = []
    for row in P.rows():
        # Handle constant term
        equation = BPR(row[COL_CONSTANT])

        # Linear terms (x_i and y_j)
        for col in range(COL_X_START, COL_X_END):
            if row[col]:
                # equation += x[col - COL_X_START]
                equation += x[ws - 1 - col + COL_X_START]

        for col in range(COL_Y_START, COL_Y_END):
            if row[col]:
                equation += y[ws - 1 - col + COL_Y_START]

        # Cross terms (x_i * y_j)
        for k in range(COL_CROSS_START, ncols):
            if row[k]:
                # Calculate cross term indices (i,j)
                cross_idx = k - COL_CROSS_START
                i = ws - 1 - (cross_idx // ws)
                j = ws - 1 - (cross_idx % ws)
                equation += x[i] * y[j]

        equations.append(equation)

    # equations = matrix_to_anf_corrected(AS, wordsize)
    # for i, eq in enumerate(equations):
    #     print(f"方程 {i}: {eq} = 0")

    return equations

def get_4contenated_sbox_implicit_quatratic_anf(sbox, num = 4):
    """
    Formulate ths ANFs of (S, 0, 0, 0)
    :param sbox:
    :param num: The number of sboxes needs to be contenated
    :return:
    """
    x_vars = [f"x{i + 32}" for i in range(96)]
    y_vars = [f"y{i + 32}" for i in range(96)]
    BPR = BooleanPolynomialRing(names=x_vars + y_vars)

    sbox_mat = get_sbox_implicit_quatratic_matrix(8, sbox)
    equation_group0 = list(matrix_to_anf_corrected(sbox_mat, 8, False, 0))
    equation_group1 = list(matrix_to_anf_corrected(sbox_mat, 8, False, 8))
    equation_group2 = list(matrix_to_anf_corrected(sbox_mat, 8, False, 16))
    equation_group3 = list(matrix_to_anf_corrected(sbox_mat, 8, False, 24))

    concatenated = concatenate_anf(equation_group0, equation_group1, prefix=None)
    concatenated = concatenate_anf(list(concatenated), equation_group2, prefix=None)
    concatenated = concatenate_anf(list(concatenated), equation_group3, prefix=None)

    # Generate new equations x_i + y_i = 0 for i from 32 to 127
    new_equations = []
    for i in range(32, 128):
        x_i = BPR(f"x{i}")
        y_i = BPR(f"y{i}")
        new_equations.append(x_i + y_i)

    # Merge the new equations into the existing system
    concatenated = concatenate_anf(list(concatenated), new_equations, prefix=None)

    # Print the result
    # for i, eq in enumerate(concatenated):
    #     print(f"方程 {i}: {eq} = 0")

    return concatenated

def compose_anf_equations(eqs1, eqs2, input_prefix="x", output_prefix="y", intermediate_prefix="z"):
    """
    Compose two sets of ANF equations (inputs/outputs are x and y respectively,
    automatically rename intermediate variables to z)
    """

    # Extract variables and determine variable count
    def extract_vars(eqs):
        vars = set()
        for eq in eqs:
            # Split equation into terms for variable extraction
            vars.update(str(eq).replace(" ", "").split("+"))
            vars.update(str(eq).replace(" ", "").split("*"))
        # Filter variables matching the pattern (e.g., "x1", "y2")
        filtered_vars = [v for v in vars if re.match(r"^[a-zA-Z]+\d+$", v)]
        # Sort variables by prefix and numerical index
        return sorted(filtered_vars, key=lambda s: (s[0], int(re.findall(r"\d+", s)[0])))

    # Identify input variables from the first equation set
    input_vars = [v for v in extract_vars(eqs1) if v.startswith(input_prefix)]
    num_vars = len(input_vars)

    # Renaming function for equation variables
    def rename_equations(eqs, old_output, new_output):
        # Create variable mapping (e.g., {"y0": "z0", "y1": "z1"})
        var_map = {f"{old_output}{i}": f"{new_output}{i}" for i in range(num_vars)}
        renamed_eqs = []
        for eq in eqs:
            eq_str = str(eq)
            # Perform variable substitution using regex
            for old, new in var_map.items():
                eq_str = re.sub(rf"\b{old}\b", new, eq_str)
            renamed_eqs.append(eq_str)
        return renamed_eqs

    # Rename equation variables to connect the two ANF systems
    eqs1_renamed = rename_equations(eqs1, output_prefix, intermediate_prefix)
    eqs2_renamed = rename_equations(eqs2, input_prefix, intermediate_prefix)

    # Create standard polynomial ring (not BooleanPolynomialRing)
    all_vars = input_vars + [f"{intermediate_prefix}{i}" for i in range(num_vars)] + [f"{output_prefix}{i}" for i in range(num_vars)]
    R = PolynomialRing(GF(2), names=all_vars)
    R.inject_variables()

    # Convert equations to standard polynomial ring format
    def parse_eqs(eq_strs):
        eqs = []
        for s in eq_strs:
            # Handle XOR operator for Sage compatibility
            s = s.replace("^", "**")
            eq = R(s)
            eqs.append(eq)
        return eqs

    # Combine equations and eliminate intermediate variables
    combined_eqs = parse_eqs(eqs1_renamed + eqs2_renamed)
    I = R.ideal(combined_eqs)
    # Perform variable elimination
    I_elim = I.elimination_ideal([R(f"{intermediate_prefix}{i}") for i in range(num_vars)])

    # Convert back to Boolean polynomial form and filter out zero polynomials
    BPR = BooleanPolynomialRing(names=input_vars + [f"{output_prefix}{i}" for i in range(num_vars)])
    final_eqs = []
    for eq in I_elim.gens():
        poly = BPR(str(eq))
        if poly != 0:
            final_eqs.append(poly)
    return final_eqs

def compose_anf_equations_stepwise(eqs1, eqs2, input_prefix="x", output_prefix="y", intermediate_prefix="z"):
	def extract_vars_by_prefix(eqs, prefix):
		vars_set = set()
		for eq in eqs:
			terms = re.split(r"[+*]+", str(eq).replace(" ", ""))
			for term in terms:
				if re.match(rf"^{prefix}\d+$", term):
					vars_set.add(term)
		# Reorder
		return sorted(vars_set, key=lambda s: int(re.findall(r"\d+", s)[0]))

	# Extract vars
	input_vars_eqs1 = extract_vars_by_prefix(eqs1, input_prefix)
	output_vars_eqs1 = extract_vars_by_prefix(eqs1, output_prefix)
	num_outputs_eqs1 = len(output_vars_eqs1)

	input_vars_eqs2 = extract_vars_by_prefix(eqs2, input_prefix)
	remaining_inputs_eqs2 = input_vars_eqs2[num_outputs_eqs1:]  # 未被替换的输入变量

	# Rename
	def rename_vars(eqs, old_prefix, new_prefix, num_replace):
		var_map = {f"{old_prefix}{i}": f"{new_prefix}{i}" for i in range(num_replace)}
		renamed = []
		for eq in eqs:
			eq_str = str(eq)
			for old, new in var_map.items():
				eq_str = re.sub(rf"\b{old}\b", new, eq_str)
			renamed.append(eq_str)
		return renamed

	eqs1_renamed = rename_vars(eqs1, output_prefix, intermediate_prefix, num_outputs_eqs1)
	eqs2_renamed = rename_vars(eqs2, input_prefix, intermediate_prefix, num_outputs_eqs1)

	# Construct polynomial ring
	all_vars = (
			input_vars_eqs1 +
			remaining_inputs_eqs2 +
			[f"{intermediate_prefix}{i}" for i in range(num_outputs_eqs1)] +
			extract_vars_by_prefix(eqs2, output_prefix)
	)
	R = PolynomialRing(GF(2), all_vars)
	R.inject_variables()

	# Equation exchange
	def parse_eqs(eq_strs):
		return [R(eq.replace("^", "**")) for eq in eq_strs]

	combined_eqs = parse_eqs(eqs1_renamed + eqs2_renamed)
	I = R.ideal(combined_eqs)

	# Eliminate internal vars
	intermediate_vars = [R.gen(all_vars.index(f"{intermediate_prefix}{i}")) for i in range(num_outputs_eqs1)]
	I_elim = I.elimination_ideal(intermediate_vars)

	# Back to polynomial ring
	output_vars = extract_vars_by_prefix(eqs2, output_prefix)
	BPR = BooleanPolynomialRing(
		names=input_vars_eqs1 + remaining_inputs_eqs2 + output_vars
	)
	final_eqs = []
	for poly in I_elim.gens():
		expr = BPR(str(poly))
		if expr != 0:
			final_eqs.append(expr)

	return final_eqs


# test line
# AS = get_sbox_implicit_quatratic_matrix(3, S)
# AS = get_sbox_implicit_quatratic_matrix(8, S_BOX)

# matrix_to_anf_corrected(AS, 3, False, 3)
# get_4contenated_sbox_implicit_quatratic_anf(S_BOX, 4)

